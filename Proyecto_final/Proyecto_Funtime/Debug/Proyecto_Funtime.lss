
Proyecto_Funtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000fcc  00001060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800126  00800126  00001086  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000010f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e6a  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097a  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105a  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf9  00000000  00000000  00005459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006152  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 06 	call	0xc44	; 0xc44 <main>
  9e:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:

unsigned char recivUART(void) {
	return bufferRX;
	/*while (!(UCSR0A & (1 << RXC0))); // Esperar a que haya datos disponibles
	return UDR0; */// Devolver el dato recibido
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <writeTextUART>:

void writeTextUART(char* texto){
  e4:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; texto[i]!='\n'; i++){ // Iterar hasta encontrar el carácter de nueva línea
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	07 c0       	rjmp	.+14     	; 0xf8 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0))); // Esperar a que el buffer de transmisión esté vacío
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <writeTextUART+0x6>
		UDR0 = texto[i]; // Transmitir carácter por carácter
  f2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return UDR0; */// Devolver el dato recibido
}

void writeTextUART(char* texto){
	uint8_t i;
	for(i=0; texto[i]!='\n'; i++){ // Iterar hasta encontrar el carácter de nueva línea
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	fa 01       	movw	r30, r20
  fa:	e2 0f       	add	r30, r18
  fc:	f1 1d       	adc	r31, r1
  fe:	30 81       	ld	r19, Z
 100:	3a 30       	cpi	r19, 0x0A	; 10
 102:	99 f7       	brne	.-26     	; 0xea <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0))); // Esperar a que el buffer de transmisión esté vacío
		UDR0 = texto[i]; // Transmitir carácter por carácter
	}
}
 104:	08 95       	ret

00000106 <initADC>:
//Funciones de módulo ADC
//*****************************************************************************

void initADC(void){
	//Inicializa el registro ADMUX a 0
	ADMUX = 0;
 106:	ec e7       	ldi	r30, 0x7C	; 124
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1

	//Selecciona la referencia de voltaje AVcc con un capacitor en AREF
	ADMUX |= (1 << REFS0);
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 112:	80 81       	ld	r24, Z
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	80 83       	st	Z, r24

	//Ajuste a la izquierda del resultado del ADC para facilitar la lectura
	ADMUX |= (1 << ADLAR);
 118:	80 81       	ld	r24, Z
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	80 83       	st	Z, r24

	//Inicializa el registro ADCSRA a 0
	ADCSRA = 0;
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	10 82       	st	Z, r1
	
	//Habilita el ADC
	ADCSRA |= (1 << ADEN);
 124:	80 81       	ld	r24, Z
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 83       	st	Z, r24
	
	//Establece la frecuencia de prescaler del ADC a 128 
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 12a:	80 81       	ld	r24, Z
 12c:	87 60       	ori	r24, 0x07	; 7
 12e:	80 83       	st	Z, r24
	
	//Deshabilita las entradas digitales en los pines ADC5 y ADC4 
	DIDR0 |= (1 << ADC5D);
 130:	ee e7       	ldi	r30, 0x7E	; 126
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 62       	ori	r24, 0x20	; 32
 138:	80 83       	st	Z, r24
	DIDR0 |= (1 << ADC4D);
 13a:	80 81       	ld	r24, Z
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <valorADC>:
}

uint16_t valorADC(uint8_t canal) {
	//Selecciona el canal del ADC limpiando los cuatro bits menos significativos
	ADMUX &= 0xF0;
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	90 83       	st	Z, r25
	ADMUX |= canal;
 14c:	90 81       	ld	r25, Z
 14e:	89 2b       	or	r24, r25
 150:	80 83       	st	Z, r24
	
	//Inicia una conversión de ADC
	ADCSRA |= (1 << ADSC);
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	
	//Espera a que la conversión de ADC termine (el bit ADSC se pondrá a 0)
	while (ADCSRA & (1 << ADSC));
 15c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 160:	86 fd       	sbrc	r24, 6
 162:	fc cf       	rjmp	.-8      	; 0x15c <valorADC+0x1a>
	
	//Retorna los 8 bits más significativos del resultado del ADC
	return ADCH;
 164:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret

0000016c <setup>:
//Configuración de puertos 
//*****************************************************************************

void setup (void){
    //BOTONES
    DDRD &= ~(1 << DDD2); //Declaración como entrada (Negro - modo manual)
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DDD2); //Activar resistencias internas para pull_up
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	84 60       	ori	r24, 0x04	; 4
 176:	8b b9       	out	0x0b, r24	; 11
	
    DDRD &= ~(1 << DDD3); //Declaración como entrada (Amarillo)
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DDD3); //Activar resistencias internas para pull_up
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	88 60       	ori	r24, 0x08	; 8
 182:	8b b9       	out	0x0b, r24	; 11
    
    DDRD &= ~(1 << DDD4); //Declaración como entrada (Rojo)
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DDD4); //Activar resistencias internas para pull_up
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	8b b9       	out	0x0b, r24	; 11
    
    DDRD &= ~(1 << DDD7); //Declaración como entrada (Azul)
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	8f 77       	andi	r24, 0x7F	; 127
 194:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << DDD7); //Activar resistencias internas para pull_up
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8b b9       	out	0x0b, r24	; 11
    
    DDRB &= ~(1 << DDB0); //Declaración como entrada (Blanco)
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << DDB0); //Activar resistencias internas para pull_up 
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	85 b9       	out	0x05, r24	; 5
	
    
    //LEDS
	//Declaración de puertos como salida para leds indicadores
    DDRB |= (1 << DDB4); //Led amarillo
 1a8:	84 b1       	in	r24, 0x04	; 4
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	84 b9       	out	0x04, r24	; 4
    DDRC |= (1 << DDC0); //Led rojo
 1ae:	87 b1       	in	r24, 0x07	; 7
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	87 b9       	out	0x07, r24	; 7
    DDRC |= (1 << DDC1); //Led azul
 1b4:	87 b1       	in	r24, 0x07	; 7
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	87 b9       	out	0x07, r24	; 7
    DDRC |= (1 << DDC2); //Led blanco 
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	87 b9       	out	0x07, r24	; 7
 1c0:	08 95       	ret

000001c2 <Yellow_read>:
//*****************************************************************************
//Funciones de lectura de Eeprom
//*****************************************************************************

// Función para leer datos de la memoria EEPROM correspondientes a la acción Yellow y aplicar los valores leídos a los servos
void Yellow_read (){
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	28 97       	sbiw	r28, 0x08	; 8
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61

	PORTB |= (1 << DDB4);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << DDC0);
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC1);
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC2);
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	88 b9       	out	0x08, r24	; 8
	
	// Arreglo para almacenar los valores leídos de la memoria EEPROM
	uint16_t read_Yellow_eeprom[4];
	
	// Lee los datos de la memoria EEPROM y los almacena en el arreglo
	eeprom_read_block((void*)read_Yellow_eeprom, (const void*)Yellow_address, sizeof(read_Yellow_eeprom));
 1ee:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Yellow_address>
 1f2:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Yellow_address+0x1>
 1f6:	48 e0       	ldi	r20, 0x08	; 8
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	0e 94 bc 07 	call	0xf78	; 0xf78 <eeprom_read_block>
	
	// Asigna los valores leídos a las variables dutyCycle
	dutyCycle1 = read_Yellow_eeprom[0];
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	3a 81       	ldd	r19, Y+2	; 0x02
 206:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <dutyCycle1+0x1>
 20a:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <dutyCycle1>
	dutyCycle2 = read_Yellow_eeprom[1];
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	9c 81       	ldd	r25, Y+4	; 0x04
 212:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 216:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = read_Yellow_eeprom[2];
 21a:	8d 81       	ldd	r24, Y+5	; 0x05
 21c:	9e 81       	ldd	r25, Y+6	; 0x06
 21e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 222:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = read_Yellow_eeprom[3];
 226:	8f 81       	ldd	r24, Y+7	; 0x07
 228:	98 85       	ldd	r25, Y+8	; 0x08
 22a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 22e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	// Actualiza los ciclos de trabajo de los servos con los valores leídos
	updateDCA(dutyCycle1/6);
 232:	ab ea       	ldi	r26, 0xAB	; 171
 234:	ba ea       	ldi	r27, 0xAA	; 170
 236:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <updateDCA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	9c e9       	ldi	r25, 0x9C	; 156
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <Yellow_read+0x88>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <Yellow_read+0x8e>
 250:	00 00       	nop
	_delay_ms(10);
	updateDCB(dutyCycle2/6);
 252:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 256:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 25a:	ab ea       	ldi	r26, 0xAB	; 171
 25c:	ba ea       	ldi	r27, 0xAA	; 170
 25e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	0e 94 5e 07 	call	0xebc	; 0xebc <updateDCB>
 26e:	8f e3       	ldi	r24, 0x3F	; 63
 270:	9c e9       	ldi	r25, 0x9C	; 156
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <Yellow_read+0xb0>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Yellow_read+0xb6>
 278:	00 00       	nop
	_delay_ms(10);
	updateDCA1(dutyCycle3/6);
 27a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 27e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 282:	ab ea       	ldi	r26, 0xAB	; 171
 284:	ba ea       	ldi	r27, 0xAA	; 170
 286:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	0e 94 a1 07 	call	0xf42	; 0xf42 <updateDCA1>
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	9c e9       	ldi	r25, 0x9C	; 156
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <Yellow_read+0xd8>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Yellow_read+0xde>
 2a0:	00 00       	nop
	_delay_ms(10);
	updateDCB1(dutyCycle4/6);
 2a2:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dutyCycle4>
 2a6:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dutyCycle4+0x1>
 2aa:	ab ea       	ldi	r26, 0xAB	; 171
 2ac:	ba ea       	ldi	r27, 0xAA	; 170
 2ae:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	0e 94 a7 07 	call	0xf4e	; 0xf4e <updateDCB1>
 2be:	8f e3       	ldi	r24, 0x3F	; 63
 2c0:	9c e9       	ldi	r25, 0x9C	; 156
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <Yellow_read+0x100>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <Yellow_read+0x106>
 2c8:	00 00       	nop
	_delay_ms(10);
}
 2ca:	28 96       	adiw	r28, 0x08	; 8
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <Red_read>:

// Función para leer datos de la memoria EEPROM correspondientes a la acción Red y aplicar los valores leídos a los servos
void Red_read (){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	28 97       	sbiw	r28, 0x08	; 8
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	
	PORTB &= ~(1 << DDB4);
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	8f 7e       	andi	r24, 0xEF	; 239
 2f4:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << DDC0);
 2f6:	88 b1       	in	r24, 0x08	; 8
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC1);
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC2);
 302:	88 b1       	in	r24, 0x08	; 8
 304:	84 60       	ori	r24, 0x04	; 4
 306:	88 b9       	out	0x08, r24	; 8
	
	// Arreglo para almacenar los valores leídos de la memoria EEPROM
	uint16_t read_Red_eeprom[4];
	
	// Lee los datos de la memoria EEPROM y los almacena en el arreglo
	eeprom_read_block((void*)read_Red_eeprom, (const void*)Red_address, sizeof(read_Red_eeprom));
 308:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Red_address>
 30c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Red_address+0x1>
 310:	48 e0       	ldi	r20, 0x08	; 8
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	0e 94 bc 07 	call	0xf78	; 0xf78 <eeprom_read_block>
	
	// Asigna los valores leídos a las variables dutyCycle
	dutyCycle1 = read_Red_eeprom[0];
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	3a 81       	ldd	r19, Y+2	; 0x02
 320:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <dutyCycle1+0x1>
 324:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <dutyCycle1>
	dutyCycle2 = read_Red_eeprom[1];
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	9c 81       	ldd	r25, Y+4	; 0x04
 32c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 330:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = read_Red_eeprom[2];
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	9e 81       	ldd	r25, Y+6	; 0x06
 338:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 33c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = read_Red_eeprom[3];
 340:	8f 81       	ldd	r24, Y+7	; 0x07
 342:	98 85       	ldd	r25, Y+8	; 0x08
 344:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 348:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	// Actualiza los ciclos de trabajo de los servos con los valores leídos
	updateDCA(dutyCycle1/6);
 34c:	ab ea       	ldi	r26, 0xAB	; 171
 34e:	ba ea       	ldi	r27, 0xAA	; 170
 350:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <updateDCA>
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	9c e9       	ldi	r25, 0x9C	; 156
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <Red_read+0x88>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Red_read+0x8e>
 36a:	00 00       	nop
	_delay_ms(10);
	updateDCB(dutyCycle2/6);
 36c:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 370:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 374:	ab ea       	ldi	r26, 0xAB	; 171
 376:	ba ea       	ldi	r27, 0xAA	; 170
 378:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	96 95       	lsr	r25
 382:	87 95       	ror	r24
 384:	0e 94 5e 07 	call	0xebc	; 0xebc <updateDCB>
 388:	8f e3       	ldi	r24, 0x3F	; 63
 38a:	9c e9       	ldi	r25, 0x9C	; 156
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <Red_read+0xb0>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Red_read+0xb6>
 392:	00 00       	nop
	_delay_ms(10);
	updateDCA1(dutyCycle3/6);
 394:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 398:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 39c:	ab ea       	ldi	r26, 0xAB	; 171
 39e:	ba ea       	ldi	r27, 0xAA	; 170
 3a0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	0e 94 a1 07 	call	0xf42	; 0xf42 <updateDCA1>
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
 3b2:	9c e9       	ldi	r25, 0x9C	; 156
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <Red_read+0xd8>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <Red_read+0xde>
 3ba:	00 00       	nop
	_delay_ms(10);
	updateDCB1(dutyCycle4/6);
 3bc:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dutyCycle4>
 3c0:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dutyCycle4+0x1>
 3c4:	ab ea       	ldi	r26, 0xAB	; 171
 3c6:	ba ea       	ldi	r27, 0xAA	; 170
 3c8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <updateDCB1>
 3d8:	8f e3       	ldi	r24, 0x3F	; 63
 3da:	9c e9       	ldi	r25, 0x9C	; 156
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <Red_read+0x100>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Red_read+0x106>
 3e2:	00 00       	nop
	_delay_ms(10);
}
 3e4:	28 96       	adiw	r28, 0x08	; 8
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <Blue_read>:

// Función para leer datos de la memoria EEPROM correspondientes a la acción Blue y aplicar los valores leídos a los servos
void Blue_read (){
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	28 97       	sbiw	r28, 0x08	; 8
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción Blue
	PORTB &= ~(1 << DDB4);
 40a:	85 b1       	in	r24, 0x05	; 5
 40c:	8f 7e       	andi	r24, 0xEF	; 239
 40e:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << DDC0);
 410:	88 b1       	in	r24, 0x08	; 8
 412:	8e 7f       	andi	r24, 0xFE	; 254
 414:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC1);
 416:	88 b1       	in	r24, 0x08	; 8
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC2);
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	8b 7f       	andi	r24, 0xFB	; 251
 420:	88 b9       	out	0x08, r24	; 8
	
	// Arreglo para almacenar los valores leídos de la memoria EEPROM
	uint16_t read_Blue_eeprom[4];
	
	// Lee los datos de la memoria EEPROM y los almacena en el arreglo
	eeprom_read_block((void*)read_Blue_eeprom, (const void*)Blue_address, sizeof(read_Blue_eeprom));
 422:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Blue_address>
 426:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Blue_address+0x1>
 42a:	48 e0       	ldi	r20, 0x08	; 8
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 bc 07 	call	0xf78	; 0xf78 <eeprom_read_block>
	
	// Asigna los valores leídos a las variables dutyCycle
	dutyCycle1 = read_Blue_eeprom[0];
 436:	29 81       	ldd	r18, Y+1	; 0x01
 438:	3a 81       	ldd	r19, Y+2	; 0x02
 43a:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <dutyCycle1+0x1>
 43e:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <dutyCycle1>
	dutyCycle2 = read_Blue_eeprom[1];
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	9c 81       	ldd	r25, Y+4	; 0x04
 446:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 44a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = read_Blue_eeprom[2];
 44e:	8d 81       	ldd	r24, Y+5	; 0x05
 450:	9e 81       	ldd	r25, Y+6	; 0x06
 452:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 456:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = read_Blue_eeprom[3];
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	98 85       	ldd	r25, Y+8	; 0x08
 45e:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 462:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	// Actualiza los ciclos de trabajo de los servos con los valores leídos
	updateDCA(dutyCycle1/6);
 466:	ab ea       	ldi	r26, 0xAB	; 171
 468:	ba ea       	ldi	r27, 0xAA	; 170
 46a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <updateDCA>
 47a:	8f e3       	ldi	r24, 0x3F	; 63
 47c:	9c e9       	ldi	r25, 0x9C	; 156
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 484:	00 00       	nop
	_delay_ms(10);
	updateDCB(dutyCycle2/6);
 486:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 48a:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 48e:	ab ea       	ldi	r26, 0xAB	; 171
 490:	ba ea       	ldi	r27, 0xAA	; 170
 492:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	0e 94 5e 07 	call	0xebc	; 0xebc <updateDCB>
 4a2:	8f e3       	ldi	r24, 0x3F	; 63
 4a4:	9c e9       	ldi	r25, 0x9C	; 156
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4ac:	00 00       	nop
	_delay_ms(10);
	updateDCA1(dutyCycle3/6);
 4ae:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 4b2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 4b6:	ab ea       	ldi	r26, 0xAB	; 171
 4b8:	ba ea       	ldi	r27, 0xAA	; 170
 4ba:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	0e 94 a1 07 	call	0xf42	; 0xf42 <updateDCA1>
 4ca:	8f e3       	ldi	r24, 0x3F	; 63
 4cc:	9c e9       	ldi	r25, 0x9C	; 156
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
	_delay_ms(10);
	updateDCB1(dutyCycle4/6);
 4d6:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dutyCycle4>
 4da:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dutyCycle4+0x1>
 4de:	ab ea       	ldi	r26, 0xAB	; 171
 4e0:	ba ea       	ldi	r27, 0xAA	; 170
 4e2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	0e 94 a7 07 	call	0xf4e	; 0xf4e <updateDCB1>
 4f2:	8f e3       	ldi	r24, 0x3F	; 63
 4f4:	9c e9       	ldi	r25, 0x9C	; 156
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fc:	00 00       	nop
	_delay_ms(10);
}
 4fe:	28 96       	adiw	r28, 0x08	; 8
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <White_read>:

// Función para leer datos de la memoria EEPROM correspondientes a la acción White y aplicar los valores leídos a los servos
void White_read (){
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	28 97       	sbiw	r28, 0x08	; 8
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción White
	PORTB &= ~(1 << DDB4);
 524:	85 b1       	in	r24, 0x05	; 5
 526:	8f 7e       	andi	r24, 0xEF	; 239
 528:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << DDC0);
 52a:	88 b1       	in	r24, 0x08	; 8
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC1);
 530:	88 b1       	in	r24, 0x08	; 8
 532:	8d 7f       	andi	r24, 0xFD	; 253
 534:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC2);
 536:	88 b1       	in	r24, 0x08	; 8
 538:	8b 7f       	andi	r24, 0xFB	; 251
 53a:	88 b9       	out	0x08, r24	; 8
	
	// Arreglo para almacenar los valores leídos de la memoria EEPROM
	uint16_t read_White_eeprom[4];
	
	// Lee los datos de la memoria EEPROM y los almacena en el arreglo
	eeprom_read_block((void*)read_White_eeprom, (const void*)White_address, sizeof(read_White_eeprom));
 53c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 540:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 544:	48 e0       	ldi	r20, 0x08	; 8
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	0e 94 bc 07 	call	0xf78	; 0xf78 <eeprom_read_block>
	
	// Asigna los valores leídos a las variables dutyCycle
	dutyCycle1 = read_White_eeprom[0];
 550:	29 81       	ldd	r18, Y+1	; 0x01
 552:	3a 81       	ldd	r19, Y+2	; 0x02
 554:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <dutyCycle1+0x1>
 558:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <dutyCycle1>
	dutyCycle2 = read_White_eeprom[1];
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	9c 81       	ldd	r25, Y+4	; 0x04
 560:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 564:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = read_White_eeprom[2];
 568:	8d 81       	ldd	r24, Y+5	; 0x05
 56a:	9e 81       	ldd	r25, Y+6	; 0x06
 56c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 570:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = read_White_eeprom[3];
 574:	8f 81       	ldd	r24, Y+7	; 0x07
 576:	98 85       	ldd	r25, Y+8	; 0x08
 578:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 57c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	// Actualiza los ciclos de trabajo de los servos con los valores leídos
	updateDCA(dutyCycle1/6);
 580:	ab ea       	ldi	r26, 0xAB	; 171
 582:	ba ea       	ldi	r27, 0xAA	; 170
 584:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <updateDCA>
 594:	8f e3       	ldi	r24, 0x3F	; 63
 596:	9c e9       	ldi	r25, 0x9C	; 156
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <White_read+0x88>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <White_read+0x8e>
 59e:	00 00       	nop
	_delay_ms(10);
	updateDCB(dutyCycle2/6);
 5a0:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 5a4:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 5a8:	ab ea       	ldi	r26, 0xAB	; 171
 5aa:	ba ea       	ldi	r27, 0xAA	; 170
 5ac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 5b0:	96 95       	lsr	r25
 5b2:	87 95       	ror	r24
 5b4:	96 95       	lsr	r25
 5b6:	87 95       	ror	r24
 5b8:	0e 94 5e 07 	call	0xebc	; 0xebc <updateDCB>
 5bc:	8f e3       	ldi	r24, 0x3F	; 63
 5be:	9c e9       	ldi	r25, 0x9C	; 156
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <White_read+0xb0>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <White_read+0xb6>
 5c6:	00 00       	nop
	_delay_ms(10);
	updateDCA1(dutyCycle3/6);
 5c8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 5cc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 5d0:	ab ea       	ldi	r26, 0xAB	; 171
 5d2:	ba ea       	ldi	r27, 0xAA	; 170
 5d4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	0e 94 a1 07 	call	0xf42	; 0xf42 <updateDCA1>
 5e4:	8f e3       	ldi	r24, 0x3F	; 63
 5e6:	9c e9       	ldi	r25, 0x9C	; 156
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <White_read+0xd8>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <White_read+0xde>
 5ee:	00 00       	nop
	_delay_ms(10);
	updateDCB1(dutyCycle4/6);
 5f0:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dutyCycle4>
 5f4:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dutyCycle4+0x1>
 5f8:	ab ea       	ldi	r26, 0xAB	; 171
 5fa:	ba ea       	ldi	r27, 0xAA	; 170
 5fc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	0e 94 a7 07 	call	0xf4e	; 0xf4e <updateDCB1>
 60c:	8f e3       	ldi	r24, 0x3F	; 63
 60e:	9c e9       	ldi	r25, 0x9C	; 156
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <White_read+0x100>
 614:	00 c0       	rjmp	.+0      	; 0x616 <White_read+0x106>
 616:	00 00       	nop
	_delay_ms(10);
}
 618:	28 96       	adiw	r28, 0x08	; 8
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <Servos_move>:

void Servos_move(void){
	// Bucle infinito para controlar el movimiento de los servos
	while (1) {
		// Verificar si se ha detectado una señal en alguno de los pines específicos
		if (!(PIND & (1 << DDD3)) || !(PIND & (1 << DDD4)) || !(PIND & (1 << DDD7)) || !(PINB & (1 << DDB0))) {
 62a:	4b 9b       	sbis	0x09, 3	; 9
 62c:	7c c0       	rjmp	.+248    	; 0x726 <Servos_move+0xfc>
 62e:	4c 9b       	sbis	0x09, 4	; 9
 630:	7a c0       	rjmp	.+244    	; 0x726 <Servos_move+0xfc>
 632:	4f 9b       	sbis	0x09, 7	; 9
 634:	78 c0       	rjmp	.+240    	; 0x726 <Servos_move+0xfc>
 636:	18 9b       	sbis	0x03, 0	; 3
 638:	76 c0       	rjmp	.+236    	; 0x726 <Servos_move+0xfc>
			// Si se ha detectado una señal, salir del bucle
			break;
		}
		
		// Actualizar el ciclo de trabajo del servo del ojo izquierdo basado en el valor del ADC en el pin 6
		dutyCycle1 = valorADC(6);
 63a:	86 e0       	ldi	r24, 0x06	; 6
 63c:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 640:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dutyCycle1+0x1>
 644:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dutyCycle1>
 648:	8f e3       	ldi	r24, 0x3F	; 63
 64a:	9c e9       	ldi	r25, 0x9C	; 156
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <Servos_move+0x22>
 650:	00 c0       	rjmp	.+0      	; 0x652 <Servos_move+0x28>
 652:	00 00       	nop
		_delay_ms(10);
		updateDCA(dutyCycle1/6);
 654:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <dutyCycle1>
 658:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <dutyCycle1+0x1>
 65c:	ab ea       	ldi	r26, 0xAB	; 171
 65e:	ba ea       	ldi	r27, 0xAA	; 170
 660:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <updateDCA>

		// Actualizar el ciclo de trabajo del servo del ojo derecho basado en el valor del ADC en el pin 7
		dutyCycle2 = valorADC(7);
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 676:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 67a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
 67e:	8f e3       	ldi	r24, 0x3F	; 63
 680:	9c e9       	ldi	r25, 0x9C	; 156
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <Servos_move+0x58>
 686:	00 c0       	rjmp	.+0      	; 0x688 <Servos_move+0x5e>
 688:	00 00       	nop
		_delay_ms(10);
		updateDCB(dutyCycle2/6);
 68a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 68e:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 692:	ab ea       	ldi	r26, 0xAB	; 171
 694:	ba ea       	ldi	r27, 0xAA	; 170
 696:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	96 95       	lsr	r25
 6a0:	87 95       	ror	r24
 6a2:	0e 94 5e 07 	call	0xebc	; 0xebc <updateDCB>

		// Actualizar el ciclo de trabajo del segundo servo del ojo izquierdo basado en el valor del ADC en el pin 5
		dutyCycle3 = valorADC(5);
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 6ac:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 6b0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
 6b4:	8f e3       	ldi	r24, 0x3F	; 63
 6b6:	9c e9       	ldi	r25, 0x9C	; 156
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <Servos_move+0x8e>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <Servos_move+0x94>
 6be:	00 00       	nop
		_delay_ms(10);
		updateDCA1(dutyCycle3/6);
 6c0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 6c4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 6c8:	ab ea       	ldi	r26, 0xAB	; 171
 6ca:	ba ea       	ldi	r27, 0xAA	; 170
 6cc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	0e 94 a1 07 	call	0xf42	; 0xf42 <updateDCA1>

		// Actualizar el ciclo de trabajo del segundo servo del ojo derecho basado en el valor del ADC en el pin 4
		dutyCycle4 = valorADC(4);
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 6e2:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 6e6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
 6ea:	8f e3       	ldi	r24, 0x3F	; 63
 6ec:	9c e9       	ldi	r25, 0x9C	; 156
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <Servos_move+0xc4>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <Servos_move+0xca>
 6f4:	00 00       	nop
		_delay_ms(10);
		updateDCB1(dutyCycle4/6);
 6f6:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <dutyCycle4>
 6fa:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <dutyCycle4+0x1>
 6fe:	ab ea       	ldi	r26, 0xAB	; 171
 700:	ba ea       	ldi	r27, 0xAA	; 170
 702:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__umulhisi3>
 706:	96 95       	lsr	r25
 708:	87 95       	ror	r24
 70a:	96 95       	lsr	r25
 70c:	87 95       	ror	r24
 70e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <updateDCB1>
 712:	9f e7       	ldi	r25, 0x7F	; 127
 714:	28 e3       	ldi	r18, 0x38	; 56
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	91 50       	subi	r25, 0x01	; 1
 71a:	20 40       	sbci	r18, 0x00	; 0
 71c:	80 40       	sbci	r24, 0x00	; 0
 71e:	e1 f7       	brne	.-8      	; 0x718 <Servos_move+0xee>
 720:	00 c0       	rjmp	.+0      	; 0x722 <Servos_move+0xf8>
 722:	00 00       	nop
 724:	82 cf       	rjmp	.-252    	; 0x62a <Servos_move>
 726:	08 95       	ret

00000728 <Manual_Mode>:
//*****************************************************************************
//Modo manual 
//*****************************************************************************

void Manual_Mode(void){
		PORTB |= (1 << DDB4);
 728:	85 b1       	in	r24, 0x05	; 5
 72a:	80 61       	ori	r24, 0x10	; 16
 72c:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1 << DDC0);
 72e:	88 b1       	in	r24, 0x08	; 8
 730:	8e 7f       	andi	r24, 0xFE	; 254
 732:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC1);
 734:	88 b1       	in	r24, 0x08	; 8
 736:	8d 7f       	andi	r24, 0xFD	; 253
 738:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC2);
 73a:	88 b1       	in	r24, 0x08	; 8
 73c:	8b 7f       	andi	r24, 0xFB	; 251
 73e:	88 b9       	out	0x08, r24	; 8
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	83 ec       	ldi	r24, 0xC3	; 195
 744:	99 e0       	ldi	r25, 0x09	; 9
 746:	21 50       	subi	r18, 0x01	; 1
 748:	80 40       	sbci	r24, 0x00	; 0
 74a:	90 40       	sbci	r25, 0x00	; 0
 74c:	e1 f7       	brne	.-8      	; 0x746 <Manual_Mode+0x1e>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <Manual_Mode+0x28>
 750:	00 00       	nop
		_delay_ms(200);
		PORTC |= (1 << DDC2);
 752:	88 b1       	in	r24, 0x08	; 8
 754:	84 60       	ori	r24, 0x04	; 4
 756:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC0);
 758:	88 b1       	in	r24, 0x08	; 8
 75a:	8e 7f       	andi	r24, 0xFE	; 254
 75c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC1);
 75e:	88 b1       	in	r24, 0x08	; 8
 760:	8d 7f       	andi	r24, 0xFD	; 253
 762:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << DDB4);
 764:	85 b1       	in	r24, 0x05	; 5
 766:	8f 7e       	andi	r24, 0xEF	; 239
 768:	85 b9       	out	0x05, r24	; 5
 76a:	2f ef       	ldi	r18, 0xFF	; 255
 76c:	83 ec       	ldi	r24, 0xC3	; 195
 76e:	99 e0       	ldi	r25, 0x09	; 9
 770:	21 50       	subi	r18, 0x01	; 1
 772:	80 40       	sbci	r24, 0x00	; 0
 774:	90 40       	sbci	r25, 0x00	; 0
 776:	e1 f7       	brne	.-8      	; 0x770 <Manual_Mode+0x48>
 778:	00 c0       	rjmp	.+0      	; 0x77a <Manual_Mode+0x52>
 77a:	00 00       	nop
		_delay_ms(200);
		PORTC |= (1 << DDC1);
 77c:	88 b1       	in	r24, 0x08	; 8
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC0);
 782:	88 b1       	in	r24, 0x08	; 8
 784:	8e 7f       	andi	r24, 0xFE	; 254
 786:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC2);
 788:	88 b1       	in	r24, 0x08	; 8
 78a:	8b 7f       	andi	r24, 0xFB	; 251
 78c:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << DDB4);
 78e:	85 b1       	in	r24, 0x05	; 5
 790:	8f 7e       	andi	r24, 0xEF	; 239
 792:	85 b9       	out	0x05, r24	; 5
 794:	2f ef       	ldi	r18, 0xFF	; 255
 796:	83 ec       	ldi	r24, 0xC3	; 195
 798:	99 e0       	ldi	r25, 0x09	; 9
 79a:	21 50       	subi	r18, 0x01	; 1
 79c:	80 40       	sbci	r24, 0x00	; 0
 79e:	90 40       	sbci	r25, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <Manual_Mode+0x72>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <Manual_Mode+0x7c>
 7a4:	00 00       	nop
		_delay_ms(200);
		PORTC |= (1 << DDC0);
 7a6:	88 b1       	in	r24, 0x08	; 8
 7a8:	81 60       	ori	r24, 0x01	; 1
 7aa:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC2);
 7ac:	88 b1       	in	r24, 0x08	; 8
 7ae:	8b 7f       	andi	r24, 0xFB	; 251
 7b0:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC1);
 7b2:	88 b1       	in	r24, 0x08	; 8
 7b4:	8d 7f       	andi	r24, 0xFD	; 253
 7b6:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << DDB4);
 7b8:	85 b1       	in	r24, 0x05	; 5
 7ba:	8f 7e       	andi	r24, 0xEF	; 239
 7bc:	85 b9       	out	0x05, r24	; 5
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	83 ec       	ldi	r24, 0xC3	; 195
 7c2:	99 e0       	ldi	r25, 0x09	; 9
 7c4:	21 50       	subi	r18, 0x01	; 1
 7c6:	80 40       	sbci	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <Manual_Mode+0x9c>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <Manual_Mode+0xa6>
 7ce:	00 00       	nop
		_delay_ms(200);
		PORTC &= ~(1 << DDC0);
 7d0:	88 b1       	in	r24, 0x08	; 8
 7d2:	8e 7f       	andi	r24, 0xFE	; 254
 7d4:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC2);
 7d6:	88 b1       	in	r24, 0x08	; 8
 7d8:	8b 7f       	andi	r24, 0xFB	; 251
 7da:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << DDC1);
 7dc:	88 b1       	in	r24, 0x08	; 8
 7de:	8d 7f       	andi	r24, 0xFD	; 253
 7e0:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << DDB4);
 7e2:	85 b1       	in	r24, 0x05	; 5
 7e4:	8f 7e       	andi	r24, 0xEF	; 239
 7e6:	85 b9       	out	0x05, r24	; 5
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	83 ec       	ldi	r24, 0xC3	; 195
 7ec:	99 e0       	ldi	r25, 0x09	; 9
 7ee:	21 50       	subi	r18, 0x01	; 1
 7f0:	80 40       	sbci	r24, 0x00	; 0
 7f2:	90 40       	sbci	r25, 0x00	; 0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <Manual_Mode+0xc6>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <Manual_Mode+0xd0>
 7f8:	00 00       	nop
		_delay_ms(200);
		PORTC |= (1 << DDC0);
 7fa:	88 b1       	in	r24, 0x08	; 8
 7fc:	81 60       	ori	r24, 0x01	; 1
 7fe:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << DDC2);
 800:	88 b1       	in	r24, 0x08	; 8
 802:	84 60       	ori	r24, 0x04	; 4
 804:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << DDC1);
 806:	88 b1       	in	r24, 0x08	; 8
 808:	82 60       	ori	r24, 0x02	; 2
 80a:	88 b9       	out	0x08, r24	; 8
		PORTB |= (1 << DDB4);
 80c:	85 b1       	in	r24, 0x05	; 5
 80e:	80 61       	ori	r24, 0x10	; 16
 810:	85 b9       	out	0x05, r24	; 5
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	83 ec       	ldi	r24, 0xC3	; 195
 816:	99 e0       	ldi	r25, 0x09	; 9
 818:	21 50       	subi	r18, 0x01	; 1
 81a:	80 40       	sbci	r24, 0x00	; 0
 81c:	90 40       	sbci	r25, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 822:	00 00       	nop
		_delay_ms(200);
		
		Servos_move();  // Función que muestra el movimiento de los servos 
 824:	0e 94 15 03 	call	0x62a	; 0x62a <Servos_move>
 828:	08 95       	ret

0000082a <Yellow_write>:
//*****************************************************************************
//Funciones de escritura de Eeprom
//*****************************************************************************

// Función para realizar una acción y escribir datos en la dirección de memoria correspondiente a la acción Yellow
void Yellow_write (void){
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	28 97       	sbiw	r28, 0x08	; 8
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción Yellow
	PORTC |= (1 << DDC0);
 83e:	88 b1       	in	r24, 0x08	; 8
 840:	81 60       	ori	r24, 0x01	; 1
 842:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC2);
 844:	88 b1       	in	r24, 0x08	; 8
 846:	84 60       	ori	r24, 0x04	; 4
 848:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC1);
 84a:	88 b1       	in	r24, 0x08	; 8
 84c:	82 60       	ori	r24, 0x02	; 2
 84e:	88 b9       	out	0x08, r24	; 8
	PORTB &= ~(1 << DDB4);
 850:	85 b1       	in	r24, 0x05	; 5
 852:	8f 7e       	andi	r24, 0xEF	; 239
 854:	85 b9       	out	0x05, r24	; 5
	
	// Realiza movimientos con servos
	Servos_move();
 856:	0e 94 15 03 	call	0x62a	; 0x62a <Servos_move>
	
	// Lee los valores de los canales ADC y los almacena en un arreglo
	dutyCycle1 = valorADC(6);
 85a:	86 e0       	ldi	r24, 0x06	; 6
 85c:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 860:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dutyCycle1+0x1>
 864:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dutyCycle1>
	dutyCycle2 = valorADC(7);
 868:	87 e0       	ldi	r24, 0x07	; 7
 86a:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 86e:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 872:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = valorADC(5);
 876:	85 e0       	ldi	r24, 0x05	; 5
 878:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 87c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 880:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = valorADC(4);
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 88a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 88e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	uint16_t PrimerGesto[4] = {dutyCycle1, dutyCycle2, dutyCycle3, dutyCycle4};
 892:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <dutyCycle1>
 896:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <dutyCycle1+0x1>
 89a:	3a 83       	std	Y+2, r19	; 0x02
 89c:	29 83       	std	Y+1, r18	; 0x01
 89e:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 8a2:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 8a6:	3c 83       	std	Y+4, r19	; 0x04
 8a8:	2b 83       	std	Y+3, r18	; 0x03
 8aa:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 8ae:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 8b2:	3e 83       	std	Y+6, r19	; 0x06
 8b4:	2d 83       	std	Y+5, r18	; 0x05
 8b6:	98 87       	std	Y+8, r25	; 0x08
 8b8:	8f 83       	std	Y+7, r24	; 0x07
	
	// Escribe el arreglo en la memoria EEPROM
	eeprom_write_block((const void*)PrimerGesto, (void*)Yellow_address, sizeof(PrimerGesto));
 8ba:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Yellow_address>
 8be:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <Yellow_address+0x1>
 8c2:	48 e0       	ldi	r20, 0x08	; 8
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	ce 01       	movw	r24, r28
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	0e 94 cc 07 	call	0xf98	; 0xf98 <eeprom_write_block>
}
 8ce:	28 96       	adiw	r28, 0x08	; 8
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	f8 94       	cli
 8d4:	de bf       	out	0x3e, r29	; 62
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	cd bf       	out	0x3d, r28	; 61
 8da:	df 91       	pop	r29
 8dc:	cf 91       	pop	r28
 8de:	08 95       	ret

000008e0 <Red_write>:

// Función para realizar una acción y escribir datos en la dirección de memoria correspondiente a la acción Red
void Red_write (void){
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	28 97       	sbiw	r28, 0x08	; 8
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	f8 94       	cli
 8ee:	de bf       	out	0x3e, r29	; 62
 8f0:	0f be       	out	0x3f, r0	; 63
 8f2:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción Red
	PORTC |= (1 << DDC0);
 8f4:	88 b1       	in	r24, 0x08	; 8
 8f6:	81 60       	ori	r24, 0x01	; 1
 8f8:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC2);
 8fa:	88 b1       	in	r24, 0x08	; 8
 8fc:	8b 7f       	andi	r24, 0xFB	; 251
 8fe:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC1);
 900:	88 b1       	in	r24, 0x08	; 8
 902:	82 60       	ori	r24, 0x02	; 2
 904:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << DDB4);
 906:	85 b1       	in	r24, 0x05	; 5
 908:	80 61       	ori	r24, 0x10	; 16
 90a:	85 b9       	out	0x05, r24	; 5
	
	// Realiza movimientos con servos
	Servos_move();
 90c:	0e 94 15 03 	call	0x62a	; 0x62a <Servos_move>
	
	// Lee los valores de los canales ADC y los almacena en un arreglo
	dutyCycle1 = valorADC(6);
 910:	86 e0       	ldi	r24, 0x06	; 6
 912:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 916:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dutyCycle1+0x1>
 91a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dutyCycle1>
	dutyCycle2 = valorADC(7);
 91e:	87 e0       	ldi	r24, 0x07	; 7
 920:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 924:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 928:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = valorADC(5);
 92c:	85 e0       	ldi	r24, 0x05	; 5
 92e:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 932:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 936:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = valorADC(4);
 93a:	84 e0       	ldi	r24, 0x04	; 4
 93c:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 940:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 944:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	uint16_t SegundoGesto[4] = {dutyCycle1, dutyCycle2, dutyCycle3, dutyCycle4};
 948:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <dutyCycle1>
 94c:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <dutyCycle1+0x1>
 950:	3a 83       	std	Y+2, r19	; 0x02
 952:	29 83       	std	Y+1, r18	; 0x01
 954:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 958:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 95c:	3c 83       	std	Y+4, r19	; 0x04
 95e:	2b 83       	std	Y+3, r18	; 0x03
 960:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 964:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 968:	3e 83       	std	Y+6, r19	; 0x06
 96a:	2d 83       	std	Y+5, r18	; 0x05
 96c:	98 87       	std	Y+8, r25	; 0x08
 96e:	8f 83       	std	Y+7, r24	; 0x07
	
	// Escribe el arreglo en la memoria EEPROM
	eeprom_write_block((const void*)SegundoGesto, (void*)Red_address, sizeof(SegundoGesto));
 970:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Red_address>
 974:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Red_address+0x1>
 978:	48 e0       	ldi	r20, 0x08	; 8
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	ce 01       	movw	r24, r28
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	0e 94 cc 07 	call	0xf98	; 0xf98 <eeprom_write_block>
}
 984:	28 96       	adiw	r28, 0x08	; 8
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <Blue_write>:

// Función para realizar una acción y escribir datos en la dirección de memoria correspondiente a la acción Blue
void Blue_write (void){
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	28 97       	sbiw	r28, 0x08	; 8
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción Blue
	PORTC |= (1 << DDC0);
 9aa:	88 b1       	in	r24, 0x08	; 8
 9ac:	81 60       	ori	r24, 0x01	; 1
 9ae:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC2);
 9b0:	88 b1       	in	r24, 0x08	; 8
 9b2:	84 60       	ori	r24, 0x04	; 4
 9b4:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC1);
 9b6:	88 b1       	in	r24, 0x08	; 8
 9b8:	8d 7f       	andi	r24, 0xFD	; 253
 9ba:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << DDB4);
 9bc:	85 b1       	in	r24, 0x05	; 5
 9be:	80 61       	ori	r24, 0x10	; 16
 9c0:	85 b9       	out	0x05, r24	; 5
	
	// Realiza movimientos con servos
	Servos_move();
 9c2:	0e 94 15 03 	call	0x62a	; 0x62a <Servos_move>
	
	// Lee los valores de los canales ADC y los almacena en un arreglo
	dutyCycle1 = valorADC(6);
 9c6:	86 e0       	ldi	r24, 0x06	; 6
 9c8:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 9cc:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dutyCycle1+0x1>
 9d0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dutyCycle1>
	dutyCycle2 = valorADC(7);
 9d4:	87 e0       	ldi	r24, 0x07	; 7
 9d6:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 9da:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 9de:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = valorADC(5);
 9e2:	85 e0       	ldi	r24, 0x05	; 5
 9e4:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 9e8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 9ec:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = valorADC(4);
 9f0:	84 e0       	ldi	r24, 0x04	; 4
 9f2:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 9f6:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 9fa:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	uint16_t TercerGesto[4] = {dutyCycle1, dutyCycle2, dutyCycle3, dutyCycle4};
 9fe:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <dutyCycle1>
 a02:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <dutyCycle1+0x1>
 a06:	3a 83       	std	Y+2, r19	; 0x02
 a08:	29 83       	std	Y+1, r18	; 0x01
 a0a:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 a0e:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 a12:	3c 83       	std	Y+4, r19	; 0x04
 a14:	2b 83       	std	Y+3, r18	; 0x03
 a16:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 a1a:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 a1e:	3e 83       	std	Y+6, r19	; 0x06
 a20:	2d 83       	std	Y+5, r18	; 0x05
 a22:	98 87       	std	Y+8, r25	; 0x08
 a24:	8f 83       	std	Y+7, r24	; 0x07
	
	// Escribe el arreglo en la memoria EEPROM
	eeprom_write_block((const void*)TercerGesto, (void*)Blue_address, sizeof(TercerGesto));
 a26:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Blue_address>
 a2a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Blue_address+0x1>
 a2e:	48 e0       	ldi	r20, 0x08	; 8
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	ce 01       	movw	r24, r28
 a34:	01 96       	adiw	r24, 0x01	; 1
 a36:	0e 94 cc 07 	call	0xf98	; 0xf98 <eeprom_write_block>
}
 a3a:	28 96       	adiw	r28, 0x08	; 8
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	f8 94       	cli
 a40:	de bf       	out	0x3e, r29	; 62
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	cd bf       	out	0x3d, r28	; 61
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	08 95       	ret

00000a4c <White_write>:

// Función para realizar una acción y escribir datos en la dirección de memoria correspondiente a la acción White
void White_write (void){
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
 a54:	28 97       	sbiw	r28, 0x08	; 8
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	f8 94       	cli
 a5a:	de bf       	out	0x3e, r29	; 62
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	cd bf       	out	0x3d, r28	; 61
	// Configura los pines correspondientes para la acción White
	PORTC &= ~(1 << DDC0);
 a60:	88 b1       	in	r24, 0x08	; 8
 a62:	8e 7f       	andi	r24, 0xFE	; 254
 a64:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC2);
 a66:	88 b1       	in	r24, 0x08	; 8
 a68:	84 60       	ori	r24, 0x04	; 4
 a6a:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << DDC1);
 a6c:	88 b1       	in	r24, 0x08	; 8
 a6e:	82 60       	ori	r24, 0x02	; 2
 a70:	88 b9       	out	0x08, r24	; 8
	PORTB |= (1 << DDB4);
 a72:	85 b1       	in	r24, 0x05	; 5
 a74:	80 61       	ori	r24, 0x10	; 16
 a76:	85 b9       	out	0x05, r24	; 5
	
	// Realiza movimientos con servos
	Servos_move();
 a78:	0e 94 15 03 	call	0x62a	; 0x62a <Servos_move>
	
	// Lee los valores de los canales ADC y los almacena en un arreglo
	dutyCycle1 = valorADC(6);
 a7c:	86 e0       	ldi	r24, 0x06	; 6
 a7e:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 a82:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <dutyCycle1+0x1>
 a86:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dutyCycle1>
	dutyCycle2 = valorADC(7);
 a8a:	87 e0       	ldi	r24, 0x07	; 7
 a8c:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 a90:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <dutyCycle2+0x1>
 a94:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <dutyCycle2>
	dutyCycle3 = valorADC(5);
 a98:	85 e0       	ldi	r24, 0x05	; 5
 a9a:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 a9e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dutyCycle3+0x1>
 aa2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dutyCycle3>
	dutyCycle4 = valorADC(4);
 aa6:	84 e0       	ldi	r24, 0x04	; 4
 aa8:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
 aac:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <dutyCycle4+0x1>
 ab0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dutyCycle4>
	
	uint16_t CuartoGesto[4] = {dutyCycle1, dutyCycle2, dutyCycle3, dutyCycle4};
 ab4:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <dutyCycle1>
 ab8:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <dutyCycle1+0x1>
 abc:	3a 83       	std	Y+2, r19	; 0x02
 abe:	29 83       	std	Y+1, r18	; 0x01
 ac0:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <dutyCycle2>
 ac4:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <dutyCycle2+0x1>
 ac8:	3c 83       	std	Y+4, r19	; 0x04
 aca:	2b 83       	std	Y+3, r18	; 0x03
 acc:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <dutyCycle3>
 ad0:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <dutyCycle3+0x1>
 ad4:	3e 83       	std	Y+6, r19	; 0x06
 ad6:	2d 83       	std	Y+5, r18	; 0x05
 ad8:	98 87       	std	Y+8, r25	; 0x08
 ada:	8f 83       	std	Y+7, r24	; 0x07
	
	// Escribe el arreglo en la memoria EEPROM
	eeprom_write_block((const void*)CuartoGesto, (void*)White_address, sizeof(CuartoGesto));
 adc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ae0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ae4:	48 e0       	ldi	r20, 0x08	; 8
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	ce 01       	movw	r24, r28
 aea:	01 96       	adiw	r24, 0x01	; 1
 aec:	0e 94 cc 07 	call	0xf98	; 0xf98 <eeprom_write_block>
}
 af0:	28 96       	adiw	r28, 0x08	; 8
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	08 95       	ret

00000b02 <__vector_18>:
//*****************************************************************************
//Interrupciones 
//*****************************************************************************

// Rutina de interrupción para manejar la recepción de datos por UART
ISR(USART_RX_vect){
 b02:	1f 92       	push	r1
 b04:	0f 92       	push	r0
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	0f 92       	push	r0
 b0a:	11 24       	eor	r1, r1
 b0c:	8f 93       	push	r24
 b0e:	ef 93       	push	r30
 b10:	ff 93       	push	r31
	
	bufferRX = UDR0;
 b12:	e6 ec       	ldi	r30, 0xC6	; 198
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <bufferRX>
	buffer_RX2 = UDR0;
 b1c:	80 81       	ld	r24, Z
 b1e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <buffer_RX2>
	while(!(UCSR0A & (1 << UDRE0)));
 b22:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 b26:	85 ff       	sbrs	r24, 5
 b28:	fc cf       	rjmp	.-8      	; 0xb22 <__vector_18+0x20>
	UDR0 = bufferRX;
 b2a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <bufferRX>
 b2e:	e6 ec       	ldi	r30, 0xC6	; 198
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 83       	st	Z, r24
	UDR0 = buffer_RX2;
 b34:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <buffer_RX2>
 b38:	80 83       	st	Z, r24
		        break;
		        default:
		        break;
	        }
        }*/
}
 b3a:	ff 91       	pop	r31
 b3c:	ef 91       	pop	r30
 b3e:	8f 91       	pop	r24
 b40:	0f 90       	pop	r0
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	0f 90       	pop	r0
 b46:	1f 90       	pop	r1
 b48:	18 95       	reti

00000b4a <__vector_7>:


// Rutina de servicio de interrupción (ISR) para el temporizador TIMER2 en modo de comparación A
ISR(TIMER2_COMPA_vect) {
 b4a:	1f 92       	push	r1
 b4c:	0f 92       	push	r0
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	0f 92       	push	r0
 b52:	11 24       	eor	r1, r1
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	af 93       	push	r26
 b5a:	bf 93       	push	r27
	// Incrementar el contador de tiempo del botón 4 si está presionado
	if (buttonPress4) {
 b5c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buttonPress4>
 b60:	88 23       	and	r24, r24
 b62:	a1 f0       	breq	.+40     	; 0xb8c <__vector_7+0x42>
		buttonTime4++;
 b64:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 b68:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 b6c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
 b70:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
 b74:	01 96       	adiw	r24, 0x01	; 1
 b76:	a1 1d       	adc	r26, r1
 b78:	b1 1d       	adc	r27, r1
 b7a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 b7e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 b82:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__data_end+0x2>
 b86:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__data_end+0x3>
 b8a:	47 c0       	rjmp	.+142    	; 0xc1a <__vector_7+0xd0>
	}
	// Incrementar el contador de tiempo del botón 1 si está presionado
	else if (buttonPress1) {
 b8c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <buttonPress1>
 b90:	88 23       	and	r24, r24
 b92:	a1 f0       	breq	.+40     	; 0xbbc <__vector_7+0x72>
		buttonTime1++;
 b94:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buttonTime1>
 b98:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buttonTime1+0x1>
 b9c:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <buttonTime1+0x2>
 ba0:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <buttonTime1+0x3>
 ba4:	01 96       	adiw	r24, 0x01	; 1
 ba6:	a1 1d       	adc	r26, r1
 ba8:	b1 1d       	adc	r27, r1
 baa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buttonTime1>
 bae:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buttonTime1+0x1>
 bb2:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <buttonTime1+0x2>
 bb6:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <buttonTime1+0x3>
 bba:	2f c0       	rjmp	.+94     	; 0xc1a <__vector_7+0xd0>
	}
	// Incrementar el contador de tiempo del botón 2 si está presionado
	else if (buttonPress2) {
 bbc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <buttonPress2>
 bc0:	88 23       	and	r24, r24
 bc2:	a1 f0       	breq	.+40     	; 0xbec <__vector_7+0xa2>
		buttonTime2++;
 bc4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <buttonTime2>
 bc8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonTime2+0x1>
 bcc:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <buttonTime2+0x2>
 bd0:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <buttonTime2+0x3>
 bd4:	01 96       	adiw	r24, 0x01	; 1
 bd6:	a1 1d       	adc	r26, r1
 bd8:	b1 1d       	adc	r27, r1
 bda:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <buttonTime2>
 bde:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <buttonTime2+0x1>
 be2:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <buttonTime2+0x2>
 be6:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <buttonTime2+0x3>
 bea:	17 c0       	rjmp	.+46     	; 0xc1a <__vector_7+0xd0>
	}
	// Incrementar el contador de tiempo del botón 3 si está presionado
	else if (buttonPress3) {
 bec:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <buttonPress3>
 bf0:	88 23       	and	r24, r24
 bf2:	99 f0       	breq	.+38     	; 0xc1a <__vector_7+0xd0>
		buttonTime3++;
 bf4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <buttonTime3>
 bf8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <buttonTime3+0x1>
 bfc:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <buttonTime3+0x2>
 c00:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <buttonTime3+0x3>
 c04:	01 96       	adiw	r24, 0x01	; 1
 c06:	a1 1d       	adc	r26, r1
 c08:	b1 1d       	adc	r27, r1
 c0a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <buttonTime3>
 c0e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <buttonTime3+0x1>
 c12:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <buttonTime3+0x2>
 c16:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <buttonTime3+0x3>
	}
}
 c1a:	bf 91       	pop	r27
 c1c:	af 91       	pop	r26
 c1e:	9f 91       	pop	r25
 c20:	8f 91       	pop	r24
 c22:	0f 90       	pop	r0
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	0f 90       	pop	r0
 c28:	1f 90       	pop	r1
 c2a:	18 95       	reti

00000c2c <initTimer2>:
//*****************************************************************************
//Timer 2
//*****************************************************************************
void initTimer2(void) {
	// Configurar Timer2 para que se desborde cada 1 ms
	TCCR2A = (1 << WGM21); // Modo CTC
 c2c:	82 e0       	ldi	r24, 0x02	; 2
 c2e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	OCR2A = 249; // Para que se desborde cada 1 ms con un prescaler de 64
 c32:	99 ef       	ldi	r25, 0xF9	; 249
 c34:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = (1 << OCIE2A); // Habilitar interrupción de comparación
 c38:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCCR2B = (1 << CS22); // Prescaler 64
 c3c:	84 e0       	ldi	r24, 0x04	; 4
 c3e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 c42:	08 95       	ret

00000c44 <main>:
//*****************************************************************************

int main(void)
{
	// Inicialización de los PWMs en los canales A y B del Timer 0 y 1 con un preescalador de 1024
	initPWM0FastA(0,1024);
 c44:	60 e0       	ldi	r22, 0x00	; 0
 c46:	74 e0       	ldi	r23, 0x04	; 4
 c48:	80 e0       	ldi	r24, 0x00	; 0
 c4a:	0e 94 32 07 	call	0xe64	; 0xe64 <initPWM0FastA>
	initPWM0FastB(0,1024);
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	74 e0       	ldi	r23, 0x04	; 4
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	0e 94 49 07 	call	0xe92	; 0xe92 <initPWM0FastB>
	initPWM1FastA(0,1024);
 c58:	60 e0       	ldi	r22, 0x00	; 0
 c5a:	74 e0       	ldi	r23, 0x04	; 4
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	0e 94 60 07 	call	0xec0	; 0xec0 <initPWM1FastA>
	initPWM1FastB(0,1024);
 c62:	60 e0       	ldi	r22, 0x00	; 0
 c64:	74 e0       	ldi	r23, 0x04	; 4
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	0e 94 83 07 	call	0xf06	; 0xf06 <initPWM1FastB>
	
	// Configuración inicial del sistema
	setup();
 c6c:	0e 94 b6 00 	call	0x16c	; 0x16c <setup>
	// Inicialización de la comunicación UART a 9600 baudios
	initUART9600();
 c70:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	// Inicialización del convertidor analógico-digital (ADC)
	initADC();
 c74:	0e 94 83 00 	call	0x106	; 0x106 <initADC>
	// Inicialización del Timer 2
	initTimer2();
 c78:	0e 94 16 06 	call	0xc2c	; 0xc2c <initTimer2>
	// Habilitar las interrupciones globales
	sei();
 c7c:	78 94       	sei
	
	// Variables para almacenar los valores de los ciclos de trabajo obtenidos del ADC
	uint16_t dutyCycle1 = valorADC(6);
 c7e:	86 e0       	ldi	r24, 0x06	; 6
 c80:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
	uint16_t dutyCycle2 = valorADC(7);
 c84:	87 e0       	ldi	r24, 0x07	; 7
 c86:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
	uint16_t dutyCycle3 = valorADC(5);
 c8a:	85 e0       	ldi	r24, 0x05	; 5
 c8c:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
	uint16_t dutyCycle4 = valorADC(4);
 c90:	84 e0       	ldi	r24, 0x04	; 4
 c92:	0e 94 a1 00 	call	0x142	; 0x142 <valorADC>
	
	// Apagar los leds
	PORTB &= ~(1 << DDB4);
 c96:	85 b1       	in	r24, 0x05	; 5
 c98:	8f 7e       	andi	r24, 0xEF	; 239
 c9a:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1 << DDC0);
 c9c:	88 b1       	in	r24, 0x08	; 8
 c9e:	8e 7f       	andi	r24, 0xFE	; 254
 ca0:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC1);
 ca2:	88 b1       	in	r24, 0x08	; 8
 ca4:	8d 7f       	andi	r24, 0xFD	; 253
 ca6:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << DDC2);
 ca8:	88 b1       	in	r24, 0x08	; 8
 caa:	8b 7f       	andi	r24, 0xFB	; 251
 cac:	88 b9       	out	0x08, r24	; 8
	
	writeTextUART("Elija una posición del 1 al 4\n");
 cae:	86 e0       	ldi	r24, 0x06	; 6
 cb0:	91 e0       	ldi	r25, 0x01	; 1
 cb2:	0e 94 72 00 	call	0xe4	; 0xe4 <writeTextUART>
	// Loop principal del programa
	while (1)
	{
		
		
		if (UDR0 == 49) {
 cb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 cba:	81 33       	cpi	r24, 0x31	; 49
 cbc:	19 f4       	brne	.+6      	; 0xcc4 <main+0x80>
			Yellow_read();
 cbe:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Yellow_read>
 cc2:	14 c0       	rjmp	.+40     	; 0xcec <main+0xa8>
			} else if (UDR0 == 50) {
 cc4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 cc8:	82 33       	cpi	r24, 0x32	; 50
 cca:	19 f4       	brne	.+6      	; 0xcd2 <main+0x8e>
			Red_read();
 ccc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Red_read>
 cd0:	0d c0       	rjmp	.+26     	; 0xcec <main+0xa8>
			} else if (UDR0 == 51) {
 cd2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 cd6:	83 33       	cpi	r24, 0x33	; 51
 cd8:	19 f4       	brne	.+6      	; 0xce0 <main+0x9c>
			Blue_read();
 cda:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Blue_read>
 cde:	06 c0       	rjmp	.+12     	; 0xcec <main+0xa8>
			} else if (UDR0 == 52) {
 ce0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 ce4:	84 33       	cpi	r24, 0x34	; 52
 ce6:	11 f4       	brne	.+4      	; 0xcec <main+0xa8>
			White_read();
 ce8:	0e 94 88 02 	call	0x510	; 0x510 <White_read>
		}
		
		// Comprobación de si el botón 1 está presionado
		if (!(PIND & (1 << DDD2))){
 cec:	4a 9b       	sbis	0x09, 2	; 9
			Manual_Mode();
 cee:	0e 94 94 03 	call	0x728	; 0x728 <Manual_Mode>
		}
		
		// Comprobación de si el botón 2 está presionado
		if (!(PIND & (1 << DDD3))) {
 cf2:	4b 99       	sbic	0x09, 3	; 9
 cf4:	2c c0       	rjmp	.+88     	; 0xd4e <main+0x10a>
			if (!buttonPress1) {
 cf6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <buttonPress1>
 cfa:	81 11       	cpse	r24, r1
 cfc:	12 c0       	rjmp	.+36     	; 0xd22 <main+0xde>
				buttonPress1 = 1;
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <buttonPress1>
				buttonTime1 = 0;
 d04:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <buttonTime1>
 d08:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <buttonTime1+0x1>
 d0c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <buttonTime1+0x2>
 d10:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <buttonTime1+0x3>
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <main+0xde>
 d16:	8f e3       	ldi	r24, 0x3F	; 63
 d18:	9c e9       	ldi	r25, 0x9C	; 156
 d1a:	01 97       	sbiw	r24, 0x01	; 1
 d1c:	f1 f7       	brne	.-4      	; 0xd1a <main+0xd6>
 d1e:	00 c0       	rjmp	.+0      	; 0xd20 <main+0xdc>
 d20:	00 00       	nop
			}
			while (!(PIND & (1 << DDD3))) {
 d22:	4b 9b       	sbis	0x09, 3	; 9
 d24:	f8 cf       	rjmp	.-16     	; 0xd16 <main+0xd2>
				_delay_ms(10);
			}
			buttonPress1 = 0;
 d26:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <buttonPress1>
			if (buttonTime1 >= 3000) {
 d2a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buttonTime1>
 d2e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buttonTime1+0x1>
 d32:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <buttonTime1+0x2>
 d36:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <buttonTime1+0x3>
 d3a:	88 3b       	cpi	r24, 0xB8	; 184
 d3c:	9b 40       	sbci	r25, 0x0B	; 11
 d3e:	a1 05       	cpc	r26, r1
 d40:	b1 05       	cpc	r27, r1
 d42:	18 f0       	brcs	.+6      	; 0xd4a <main+0x106>
				//Si el botón estuvo presionado durante al menos 5 segundos
				Yellow_write();
 d44:	0e 94 15 04 	call	0x82a	; 0x82a <Yellow_write>
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <main+0x10a>
				} else {
				//Si el botón estuvo presionado por menos de 5 segundos
				Yellow_read();
 d4a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Yellow_read>
			}
		}
		
		// Comprobación de si el botón 3 está presionado
		if (!(PIND & (1 << DDD4))) {
 d4e:	4c 99       	sbic	0x09, 4	; 9
 d50:	2c c0       	rjmp	.+88     	; 0xdaa <main+0x166>
			if (!buttonPress2) {
 d52:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <buttonPress2>
 d56:	81 11       	cpse	r24, r1
 d58:	12 c0       	rjmp	.+36     	; 0xd7e <main+0x13a>
				buttonPress2 = 1;
 d5a:	81 e0       	ldi	r24, 0x01	; 1
 d5c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <buttonPress2>
				buttonTime2 = 0;
 d60:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <buttonTime2>
 d64:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <buttonTime2+0x1>
 d68:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <buttonTime2+0x2>
 d6c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <buttonTime2+0x3>
 d70:	06 c0       	rjmp	.+12     	; 0xd7e <main+0x13a>
 d72:	8f e3       	ldi	r24, 0x3F	; 63
 d74:	9c e9       	ldi	r25, 0x9C	; 156
 d76:	01 97       	sbiw	r24, 0x01	; 1
 d78:	f1 f7       	brne	.-4      	; 0xd76 <main+0x132>
 d7a:	00 c0       	rjmp	.+0      	; 0xd7c <main+0x138>
 d7c:	00 00       	nop
			}
			while (!(PIND & (1 << DDD4))) {
 d7e:	4c 9b       	sbis	0x09, 4	; 9
 d80:	f8 cf       	rjmp	.-16     	; 0xd72 <main+0x12e>
				_delay_ms(10);
			}
			buttonPress2 = 0;
 d82:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <buttonPress2>
			if (buttonTime2 >= 3000) {
 d86:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <buttonTime2>
 d8a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <buttonTime2+0x1>
 d8e:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <buttonTime2+0x2>
 d92:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <buttonTime2+0x3>
 d96:	88 3b       	cpi	r24, 0xB8	; 184
 d98:	9b 40       	sbci	r25, 0x0B	; 11
 d9a:	a1 05       	cpc	r26, r1
 d9c:	b1 05       	cpc	r27, r1
 d9e:	18 f0       	brcs	.+6      	; 0xda6 <main+0x162>
				// Si el botón estuvo presionado durante al menos 5 segundos
				Red_write();
 da0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Red_write>
 da4:	02 c0       	rjmp	.+4      	; 0xdaa <main+0x166>
				} else {
				// Si el botón estuvo presionado por menos de 5 segundos
				Red_read();
 da6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Red_read>
			}
		}
		
		// Comprobación de si el botón 4 está presionado
		if (!(PIND & (1 << DDD7))) {
 daa:	4f 99       	sbic	0x09, 7	; 9
 dac:	2c c0       	rjmp	.+88     	; 0xe06 <main+0x1c2>
			if (!buttonPress3) {
 dae:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <buttonPress3>
 db2:	81 11       	cpse	r24, r1
 db4:	12 c0       	rjmp	.+36     	; 0xdda <main+0x196>
				buttonPress3 = 1;
 db6:	81 e0       	ldi	r24, 0x01	; 1
 db8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <buttonPress3>
				buttonTime3 = 0;
 dbc:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <buttonTime3>
 dc0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <buttonTime3+0x1>
 dc4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <buttonTime3+0x2>
 dc8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <buttonTime3+0x3>
 dcc:	06 c0       	rjmp	.+12     	; 0xdda <main+0x196>
 dce:	8f e3       	ldi	r24, 0x3F	; 63
 dd0:	9c e9       	ldi	r25, 0x9C	; 156
 dd2:	01 97       	sbiw	r24, 0x01	; 1
 dd4:	f1 f7       	brne	.-4      	; 0xdd2 <main+0x18e>
 dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <main+0x194>
 dd8:	00 00       	nop
			}
			while (!(PIND & (1 << DDD7))) {
 dda:	4f 9b       	sbis	0x09, 7	; 9
 ddc:	f8 cf       	rjmp	.-16     	; 0xdce <main+0x18a>
				_delay_ms(10);
			}
			buttonPress3 = 0;
 dde:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <buttonPress3>
			if (buttonTime3 >= 3000) {
 de2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <buttonTime3>
 de6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <buttonTime3+0x1>
 dea:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <buttonTime3+0x2>
 dee:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <buttonTime3+0x3>
 df2:	88 3b       	cpi	r24, 0xB8	; 184
 df4:	9b 40       	sbci	r25, 0x0B	; 11
 df6:	a1 05       	cpc	r26, r1
 df8:	b1 05       	cpc	r27, r1
 dfa:	18 f0       	brcs	.+6      	; 0xe02 <main+0x1be>
				// Si el botón estuvo presionado durante al menos 5 segundos
				Blue_write();
 dfc:	0e 94 cb 04 	call	0x996	; 0x996 <Blue_write>
 e00:	02 c0       	rjmp	.+4      	; 0xe06 <main+0x1c2>
				} else {
				// Si el botón estuvo presionado por menos de 5 segundos
				Blue_read();
 e02:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Blue_read>
			}
		}
		
		// Comprobación de si el botón 5 está presionado
		if (!(PINB & (1 << DDB0))) {
 e06:	18 99       	sbic	0x03, 0	; 3
 e08:	56 cf       	rjmp	.-340    	; 0xcb6 <main+0x72>
			if (!buttonPress4) {
 e0a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buttonPress4>
 e0e:	81 11       	cpse	r24, r1
 e10:	12 c0       	rjmp	.+36     	; 0xe36 <main+0x1f2>
				buttonPress4 = 1;
 e12:	81 e0       	ldi	r24, 0x01	; 1
 e14:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <buttonPress4>
				buttonTime4 = 0;
 e18:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
 e1c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 e20:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end+0x2>
 e24:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x3>
 e28:	06 c0       	rjmp	.+12     	; 0xe36 <main+0x1f2>
 e2a:	8f e3       	ldi	r24, 0x3F	; 63
 e2c:	9c e9       	ldi	r25, 0x9C	; 156
 e2e:	01 97       	sbiw	r24, 0x01	; 1
 e30:	f1 f7       	brne	.-4      	; 0xe2e <main+0x1ea>
 e32:	00 c0       	rjmp	.+0      	; 0xe34 <main+0x1f0>
 e34:	00 00       	nop
			}
			while (!(PINB & (1 << DDB0))) {
 e36:	18 9b       	sbis	0x03, 0	; 3
 e38:	f8 cf       	rjmp	.-16     	; 0xe2a <main+0x1e6>
				_delay_ms(10);
			}
			buttonPress4 = 0;
 e3a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <buttonPress4>
			if (buttonTime4 >= 3000) {
 e3e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 e42:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 e46:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <__data_end+0x2>
 e4a:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <__data_end+0x3>
 e4e:	88 3b       	cpi	r24, 0xB8	; 184
 e50:	9b 40       	sbci	r25, 0x0B	; 11
 e52:	a1 05       	cpc	r26, r1
 e54:	b1 05       	cpc	r27, r1
 e56:	18 f0       	brcs	.+6      	; 0xe5e <main+0x21a>
				// Si el botón estuvo presionado durante al menos 5 segundos
				White_write();
 e58:	0e 94 26 05 	call	0xa4c	; 0xa4c <White_write>
 e5c:	2c cf       	rjmp	.-424    	; 0xcb6 <main+0x72>
				} else {
				// Si el botón estuvo presionado por menos de 5 segundos
				White_read();
 e5e:	0e 94 88 02 	call	0x510	; 0x510 <White_read>
 e62:	29 cf       	rjmp	.-430    	; 0xcb6 <main+0x72>

00000e64 <initPWM0FastA>:
#include "Ojito_L.h"  // Incluye el archivo de encabezado que declara las funciones y constantes

// Función para inicializar el PWM en el canal A del Timer 0
void initPWM0FastA(uint8_t inverted, uint16_t precaler){
	DDRD |= (1<<DDD6);  // Establece el pin de salida para el canal A del Timer 0
 e64:	9a b1       	in	r25, 0x0a	; 10
 e66:	90 64       	ori	r25, 0x40	; 64
 e68:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A = 0;  // Borra los bits de control del Timer 0
 e6a:	14 bc       	out	0x24, r1	; 36
	if (inverted) {
 e6c:	88 23       	and	r24, r24
 e6e:	21 f0       	breq	.+8      	; 0xe78 <initPWM0FastA+0x14>
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);  // Configura la salida del canal A en modo PWM invertido
 e70:	84 b5       	in	r24, 0x24	; 36
 e72:	80 6c       	ori	r24, 0xC0	; 192
 e74:	84 bd       	out	0x24, r24	; 36
 e76:	03 c0       	rjmp	.+6      	; 0xe7e <initPWM0FastA+0x1a>
		} else {
		TCCR0A |= (1<<COM0A1);  // Configura la salida del canal A en modo PWM no invertido
 e78:	84 b5       	in	r24, 0x24	; 36
 e7a:	80 68       	ori	r24, 0x80	; 128
 e7c:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |= (1<<WGM01)|(1<<WGM00);  // Configura el Timer 0 en modo PWM rápido (modo 7)
 e7e:	84 b5       	in	r24, 0x24	; 36
 e80:	83 60       	ori	r24, 0x03	; 3
 e82:	84 bd       	out	0x24, r24	; 36
	
	if (precaler == 1024) {
 e84:	61 15       	cp	r22, r1
 e86:	74 40       	sbci	r23, 0x04	; 4
 e88:	19 f4       	brne	.+6      	; 0xe90 <initPWM0FastA+0x2c>
		TCCR0B |= (1<<CS02)|(1<<CS00);  // Configura el preescalador del Timer 0 en 1024
 e8a:	85 b5       	in	r24, 0x25	; 37
 e8c:	85 60       	ori	r24, 0x05	; 5
 e8e:	85 bd       	out	0x25, r24	; 37
 e90:	08 95       	ret

00000e92 <initPWM0FastB>:
	}
}

// Función para inicializar el PWM en el canal B del Timer 0
void initPWM0FastB(uint8_t inverted, uint16_t precaler){
	DDRD |= (1<<DDD5);  // Establece el pin de salida para el canal B del Timer 0
 e92:	9a b1       	in	r25, 0x0a	; 10
 e94:	90 62       	ori	r25, 0x20	; 32
 e96:	9a b9       	out	0x0a, r25	; 10
	
	if (inverted) {
 e98:	88 23       	and	r24, r24
 e9a:	21 f0       	breq	.+8      	; 0xea4 <initPWM0FastB+0x12>
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);  // Configura la salida del canal B en modo PWM invertido
 e9c:	84 b5       	in	r24, 0x24	; 36
 e9e:	80 63       	ori	r24, 0x30	; 48
 ea0:	84 bd       	out	0x24, r24	; 36
 ea2:	03 c0       	rjmp	.+6      	; 0xeaa <initPWM0FastB+0x18>
		} else {
		TCCR0A |= (1<<COM0B1);  // Configura la salida del canal B en modo PWM no invertido
 ea4:	84 b5       	in	r24, 0x24	; 36
 ea6:	80 62       	ori	r24, 0x20	; 32
 ea8:	84 bd       	out	0x24, r24	; 36
	}
	
	TCCR0A |= (1<<WGM01)|(1<<WGM00);  // Configura el Timer 0 en modo PWM rápido (modo 7)
 eaa:	84 b5       	in	r24, 0x24	; 36
 eac:	83 60       	ori	r24, 0x03	; 3
 eae:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B |= (1<<CS02)|(1<<CS00);  // Configura el preescalador del Timer 0 en 1024
 eb0:	85 b5       	in	r24, 0x25	; 37
 eb2:	85 60       	ori	r24, 0x05	; 5
 eb4:	85 bd       	out	0x25, r24	; 37
 eb6:	08 95       	ret

00000eb8 <updateDCA>:
}

// Función para actualizar el valor del registro de comparación del canal A del Timer 0
void updateDCA(uint8_t duty){
	OCR0A = duty;  // Actualiza el valor del registro de comparación para el canal A del Timer 0
 eb8:	87 bd       	out	0x27, r24	; 39
 eba:	08 95       	ret

00000ebc <updateDCB>:
}

// Función para actualizar el valor del registro de comparación del canal B del Timer 0
void updateDCB(uint8_t duty){
	OCR0B = duty;  // Actualiza el valor del registro de comparación para el canal B del Timer 0
 ebc:	88 bd       	out	0x28, r24	; 40
 ebe:	08 95       	ret

00000ec0 <initPWM1FastA>:
#include "Ojito_R.h"  // Incluye el encabezado que contiene las declaraciones de las funciones y constantes necesarias

// Función para inicializar el PWM en el canal A del Timer 1
void initPWM1FastA(uint8_t inverted, uint16_t precaler) {
	// Configuración del pin correspondiente al canal A como salida
	DDRB |= (1<<DDB1);
 ec0:	94 b1       	in	r25, 0x04	; 4
 ec2:	92 60       	ori	r25, 0x02	; 2
 ec4:	94 b9       	out	0x04, r25	; 4
	
	// Configuración del modo de operación del Timer 1 y del modo de salida PWM del canal A
	TCCR1A = 0;
 ec6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	if (inverted) {
 eca:	88 23       	and	r24, r24
 ecc:	31 f0       	breq	.+12     	; 0xeda <initPWM1FastA+0x1a>
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0);
 ece:	e0 e8       	ldi	r30, 0x80	; 128
 ed0:	f0 e0       	ldi	r31, 0x00	; 0
 ed2:	80 81       	ld	r24, Z
 ed4:	80 6c       	ori	r24, 0xC0	; 192
 ed6:	80 83       	st	Z, r24
 ed8:	05 c0       	rjmp	.+10     	; 0xee4 <initPWM1FastA+0x24>
		} else {
		TCCR1A |= (1<<COM1A1);
 eda:	e0 e8       	ldi	r30, 0x80	; 128
 edc:	f0 e0       	ldi	r31, 0x00	; 0
 ede:	80 81       	ld	r24, Z
 ee0:	80 68       	ori	r24, 0x80	; 128
 ee2:	80 83       	st	Z, r24
	}
	TCCR1A |= (1<<WGM10);  // Configuración del modo PWM
 ee4:	e0 e8       	ldi	r30, 0x80	; 128
 ee6:	f0 e0       	ldi	r31, 0x00	; 0
 ee8:	80 81       	ld	r24, Z
 eea:	81 60       	ori	r24, 0x01	; 1
 eec:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 eee:	e1 e8       	ldi	r30, 0x81	; 129
 ef0:	f0 e0       	ldi	r31, 0x00	; 0
 ef2:	80 81       	ld	r24, Z
 ef4:	88 60       	ori	r24, 0x08	; 8
 ef6:	80 83       	st	Z, r24
	
	// Configuración del preescalador del Timer 1
	if (precaler == 1024) {
 ef8:	61 15       	cp	r22, r1
 efa:	74 40       	sbci	r23, 0x04	; 4
 efc:	19 f4       	brne	.+6      	; 0xf04 <initPWM1FastA+0x44>
		TCCR1B |= (1<<CS12)|(1<<CS10);
 efe:	80 81       	ld	r24, Z
 f00:	85 60       	ori	r24, 0x05	; 5
 f02:	80 83       	st	Z, r24
 f04:	08 95       	ret

00000f06 <initPWM1FastB>:
}

// Función para inicializar el PWM en el canal B del Timer 1
void initPWM1FastB(uint8_t inverted, uint16_t precaler) {
	// Configuración del pin correspondiente al canal B como salida
	DDRB |= (1<<DDB2);
 f06:	94 b1       	in	r25, 0x04	; 4
 f08:	94 60       	ori	r25, 0x04	; 4
 f0a:	94 b9       	out	0x04, r25	; 4
	
	// Configuración del modo de salida PWM del canal B
	if (inverted) {
 f0c:	88 23       	and	r24, r24
 f0e:	31 f0       	breq	.+12     	; 0xf1c <initPWM1FastB+0x16>
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0);
 f10:	e0 e8       	ldi	r30, 0x80	; 128
 f12:	f0 e0       	ldi	r31, 0x00	; 0
 f14:	80 81       	ld	r24, Z
 f16:	80 63       	ori	r24, 0x30	; 48
 f18:	80 83       	st	Z, r24
 f1a:	05 c0       	rjmp	.+10     	; 0xf26 <initPWM1FastB+0x20>
		} else {
		TCCR1A |= (1<<COM1B1);
 f1c:	e0 e8       	ldi	r30, 0x80	; 128
 f1e:	f0 e0       	ldi	r31, 0x00	; 0
 f20:	80 81       	ld	r24, Z
 f22:	80 62       	ori	r24, 0x20	; 32
 f24:	80 83       	st	Z, r24
	}
	TCCR1A |= (1<<WGM10);  // Configuración del modo PWM
 f26:	e0 e8       	ldi	r30, 0x80	; 128
 f28:	f0 e0       	ldi	r31, 0x00	; 0
 f2a:	80 81       	ld	r24, Z
 f2c:	81 60       	ori	r24, 0x01	; 1
 f2e:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 f30:	e1 e8       	ldi	r30, 0x81	; 129
 f32:	f0 e0       	ldi	r31, 0x00	; 0
 f34:	80 81       	ld	r24, Z
 f36:	88 60       	ori	r24, 0x08	; 8
 f38:	80 83       	st	Z, r24
	
	// Configuración del preescalador del Timer 1
	TCCR1B |= (1<<CS12)|(1<<CS10);
 f3a:	80 81       	ld	r24, Z
 f3c:	85 60       	ori	r24, 0x05	; 5
 f3e:	80 83       	st	Z, r24
 f40:	08 95       	ret

00000f42 <updateDCA1>:
}

// Función para actualizar el ciclo de trabajo del canal A del Timer 1
void updateDCA1(uint8_t duty) {
	OCR1A = duty;  // Se establece el valor del registro de comparación del canal A
 f42:	90 e0       	ldi	r25, 0x00	; 0
 f44:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 f48:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 f4c:	08 95       	ret

00000f4e <updateDCB1>:
}

// Función para actualizar el ciclo de trabajo del canal B del Timer 1
void updateDCB1(uint8_t duty) {
	OCR1B = duty;  // Se establece el valor del registro de comparación del canal B
 f4e:	90 e0       	ldi	r25, 0x00	; 0
 f50:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 f54:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 f58:	08 95       	ret

00000f5a <__umulhisi3>:
 f5a:	a2 9f       	mul	r26, r18
 f5c:	b0 01       	movw	r22, r0
 f5e:	b3 9f       	mul	r27, r19
 f60:	c0 01       	movw	r24, r0
 f62:	a3 9f       	mul	r26, r19
 f64:	70 0d       	add	r23, r0
 f66:	81 1d       	adc	r24, r1
 f68:	11 24       	eor	r1, r1
 f6a:	91 1d       	adc	r25, r1
 f6c:	b2 9f       	mul	r27, r18
 f6e:	70 0d       	add	r23, r0
 f70:	81 1d       	adc	r24, r1
 f72:	11 24       	eor	r1, r1
 f74:	91 1d       	adc	r25, r1
 f76:	08 95       	ret

00000f78 <eeprom_read_block>:
 f78:	dc 01       	movw	r26, r24
 f7a:	cb 01       	movw	r24, r22

00000f7c <eeprom_read_blraw>:
 f7c:	fc 01       	movw	r30, r24
 f7e:	f9 99       	sbic	0x1f, 1	; 31
 f80:	fe cf       	rjmp	.-4      	; 0xf7e <eeprom_read_blraw+0x2>
 f82:	06 c0       	rjmp	.+12     	; 0xf90 <eeprom_read_blraw+0x14>
 f84:	f2 bd       	out	0x22, r31	; 34
 f86:	e1 bd       	out	0x21, r30	; 33
 f88:	f8 9a       	sbi	0x1f, 0	; 31
 f8a:	31 96       	adiw	r30, 0x01	; 1
 f8c:	00 b4       	in	r0, 0x20	; 32
 f8e:	0d 92       	st	X+, r0
 f90:	41 50       	subi	r20, 0x01	; 1
 f92:	50 40       	sbci	r21, 0x00	; 0
 f94:	b8 f7       	brcc	.-18     	; 0xf84 <eeprom_read_blraw+0x8>
 f96:	08 95       	ret

00000f98 <eeprom_write_block>:
 f98:	dc 01       	movw	r26, r24
 f9a:	cb 01       	movw	r24, r22
 f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <eeprom_write_block+0xc>
 f9e:	2d 91       	ld	r18, X+
 fa0:	0e 94 d7 07 	call	0xfae	; 0xfae <eeprom_write_r18>
 fa4:	41 50       	subi	r20, 0x01	; 1
 fa6:	50 40       	sbci	r21, 0x00	; 0
 fa8:	d0 f7       	brcc	.-12     	; 0xf9e <eeprom_write_block+0x6>
 faa:	08 95       	ret

00000fac <eeprom_write_byte>:
 fac:	26 2f       	mov	r18, r22

00000fae <eeprom_write_r18>:
 fae:	f9 99       	sbic	0x1f, 1	; 31
 fb0:	fe cf       	rjmp	.-4      	; 0xfae <eeprom_write_r18>
 fb2:	1f ba       	out	0x1f, r1	; 31
 fb4:	92 bd       	out	0x22, r25	; 34
 fb6:	81 bd       	out	0x21, r24	; 33
 fb8:	20 bd       	out	0x20, r18	; 32
 fba:	0f b6       	in	r0, 0x3f	; 63
 fbc:	f8 94       	cli
 fbe:	fa 9a       	sbi	0x1f, 2	; 31
 fc0:	f9 9a       	sbi	0x1f, 1	; 31
 fc2:	0f be       	out	0x3f, r0	; 63
 fc4:	01 96       	adiw	r24, 0x01	; 1
 fc6:	08 95       	ret

00000fc8 <_exit>:
 fc8:	f8 94       	cli

00000fca <__stop_program>:
 fca:	ff cf       	rjmp	.-2      	; 0xfca <__stop_program>
